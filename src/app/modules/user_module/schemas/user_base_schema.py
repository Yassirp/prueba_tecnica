from pydantic import BaseModel, EmailStr, Field, model_validator
from typing import Optional

class UserBase(BaseModel):
    name: str = Field(..., description="Nombre del usuario.")
    last_name: str = Field(..., description="Apellido del usuario.")
    email: EmailStr = Field(..., description="Email del usuario (debe ser único).")
    phone: str = Field(..., description="Teléfono del usuario.")
    address: str = Field(..., description="Dirección del usuario.")
    country_id: int = Field(..., description="País del usuario.")
    department_id: int = Field(..., description="Departamento del usuario.")
    municipality_id: int = Field(..., description="Municipio del usuario.")
    document_type: int = Field(..., description="Tipo de documento del usuario.")
    document_number: str = Field(..., description="Número de documento del usuario.")
    zip_code: Optional[str] = Field(default=None, description="Código postal del usuario.")
    role_id: int = Field(default=2, description="Rol del usuario.")
    created_by: Optional[int] = Field(default=None, description="ID del usuario que creó el usuario.")
    state: int = Field(default=1, description="Estado lógico del usuario.")
    code: Optional[str] = Field(default=None, description="Código de verificación del usuario.")
    campus: Optional[int] = Field(default=None, description="Campus al que pertenece el usuario.")
    time: Optional[str] = Field(default=None, description="Tiempo que lleva en LivingRoom.")
    courses: Optional[str] = Field(default=None, description="Cursos realizados por el usuario (lista separada por comas).")
    participated_in_living_group: Optional[int] = Field(default=None, description="1 si sí, 0 si no.")
    living_group_name: Optional[str] = Field(default=None, description="Nombre del grupo (si aplica).")
    did_camp: Optional[int] = Field(default=None, description="1 si sí, 0 si no.")
    data: Optional[dict] = Field(default=None, description="Datos complementarios del usuario.")
